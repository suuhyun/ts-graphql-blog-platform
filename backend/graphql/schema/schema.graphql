scalar Date

type Query {
    users: [User]!
    user(id: Int!): User!

    posts: [Post!]!
    post(id: Int!): Post!

    comments: [Comment]!
    comment(id: Int!): Comment!
}
type Mutation {
    createPost(userId: Int!, post: PostInput!): Post!
    updatePost(id: Int!, post: UpdatePostInput!): Post!
    deletePost(id: Int!): Post!

    createUser(user: UserInput!): User!
    updateUser(user: UpdateUserInput!): User!
    deleteUser(id: Int!): User!
    toggleLikePost(userId: Int!, postId: Int!): User!
    toggleLikeComment(userId: Int!, commentId: Int!): User!

    login(loginUser: LoginUserInput!): User!
    logout: Boolean!
    refreshToken: User!

    createComment(postId: Int!, userId: Int!, comment: CommentInput!): Comment!
    updateComment(id: Int!, comment: UpdateCommentInput!): Comment!
    deleteComment(id: Int!): Comment!
}
input UserInput {
    firstName: String!
    lastName: String
    username: String!
    email: String!
    password: String!
}
input LoginUserInput {
    email: String!
    password: String!
}
input UpdateUserInput {
    firstName: String
    lastName: String
    username: String
    email: String
}
input PostInput {
    title: String!
    content: String!
}
input UpdatePostInput {
    title: String
    content: String
}
input CommentInput {
    body: String!
}
input UpdateCommentInput {
    body: String
}
type User {
    id: Int!
    firstName: String!
    lastName: String
    username: String!
    email: String!
    posts: [Post!]!
    comments: [Comment!]!
    likedPosts: [Post!]!
    likedComments: [Comment!]!
}
type Post {
    id: Int!
    author: User!
    authorId: Int!
    createdAt: Date!
    updatedAt: Date!
    title: String!
    content: String!
    likes: [User!]
    comments: [Comment!]
}
type Comment {
    id: Int!
    author: User!
    authorId: Int!
    post: Post!
    postId: Int!
    body: String!
    createdAt: Date!
    updatedAt: Date!
    likes: [User!]
}
